#!/bin/bash
# Petal
# fake_readdata
# Wolf Honore
#
# Fake data from an Arduino for testing. Can either control with 'read' arg or
# use random data with 'rand' arg.

# Create a pseudoterminal with socat named tmppty
DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
PTY="$DIR/tmppty"
SOCAT_OPTS="-d -d -u - PTY,b9600,echo=0,link=$PTY"

SYNC_VAL=13
DEL=0.001
NFXS=4
NCTRLS=5

# Print a number as a raw byte
raw_print () {
    printf \\x$(printf %x $1)
}

# Print user message to stderr
display () {
    echo $@ 1>&2
}

# Print out all values
print_data() {
    raw_print $SYNC_VAL
    raw_print $1 # muteVal
    raw_print $2 # leftVal
    raw_print $3 # rightVal
    for i in $4; do
        raw_print $i # idxsVal
    done
    for i in $5; do
        raw_print $(($i & 0xFF)) # lowByte
        raw_print $(($i >> 8)) # highByte
    done

    sleep $DEL
}

# Only reset the on/off values
reset_buttons() {
    MUTE=0
    LEFT=0
    RIGHT=0
    IDXS=
    for i in $(seq 1 $NFXS); do
        IDXS+="0 "
    done
}

# Reset all values
reset_all() {
    reset_buttons
    CTRLDATA=
    for i in $(seq 1 $NCTRLS); do
        CTRLDATA+="0 "
    done
}

# Set IDXS
set_idx() {
    idx=$1
    if ((idx < $NFXS)); then
        read -r -a idxs <<< "$IDXS"
        idxs[$idx]=1
        IDXS="${idxs[*]}"
    else display "idx must be in range [0, $NFXS)"
    fi
}

# Set CTRLDATA
set_ctrl() {
    ctrls=($@)
    read -r -a old <<< "$CTRLDATA"
    CTRLDATA=
    for i in $(seq 1 $NCTRLS); do
        if [[ ${ctrls[$i]} == "" ]]
            then CTRLDATA+="${old[$i]} "
            else CTRLDATA+="${ctrls[$i]} "
        fi
    done
}

# Read a command
read_command() {
    read -p "Enter command: " -a cmd
    case ${cmd[0]} in
        mute) MUTE=1;;
        left) LEFT=1;;
        right) RIGHT=1;;
        idx) set_idx ${cmd[1]};;
        ctrl) set_ctrl "${cmd[*]}";;
        *) display "Must be: mute | left | right | idx {num} | ctrl {num}x$NCTRLS"
    esac
}

# Generate random values
randdata () {
    while true; do
        MUTE=$(($RANDOM % 2))
        LEFT=$(($RANDOM % 2))
        RIGHT=$(($RANDOM % 2))
        IDXS=
        for i in $(seq 1 $NFXS); do
            IDXS+="$(($RANDOM % 2)) "
        done
        CTRLDATA=
        for i in $(seq 1 $NCTRLS); do
            CTRLDATA+="$((RANDOM % 1024)) "
        done

        print_data $MUTE $LEFT $RIGHT "$IDXS" "$CTRLDATA"
    done
}

# Generate values based on user input
readdata() {
    reset_all
    while true; do
        reset_buttons
        read_command

        # Send 0's after to simulate press and release
        display $MUTE $LEFT $RIGHT "$IDXS" "$CTRLDATA"
        print_data $MUTE $LEFT $RIGHT "$IDXS" "$CTRLDATA"
        print_data 0 0 0 "$IDXS" "$CTRLDATA"
    done
}

case $1 in
    read) readdata | socat $SOCAT_OPTS;;
    rand) randdata | socat $SOCAT_OPTS;;
    *) echo "usage: $0 [read | rand]";;
esac
